
Q1. Query all columns for all American cities in the CITY table with populations larger than 100000.

Ans : SELECT * FROM `city` where COUNTRYCODE = 'USA' AND POPULATION > 100000

Q2. Query the NAME field for all American cities in the CITY table with populations larger than 120000.

Ans : SELECT NAME FROM `city` where COUNTRYCODE = 'USA' AND POPULATION > 120000

Q3. Query all columns (attributes) for every row in the CITY table.

Ans : SELECT * FROM `city`

Q4. Query all columns for a city in CITY with the ID 1661.

Ans : SELECT * FROM `city` where ID = 1661

Q5. Query all attributes of every Japanese city in the CITY table

Ans : SELECT * FROM `city` where COUNTRYCODE = 'JPN'

Q6. Query the names of all the Japanese cities in the CITY table. 

Ans : SELECT NAME FROM `city` where COUNTRYCODE = 'JPN'

Q7. Query a list of CITY and STATE from the STATION table.

Ans:select City,State from station

Q8. Query a list of CITY names from STATION for cities that have an even ID number. 

Ans : select distinct City from station where Id % 2 = 0 order by Id asc;

Q9. Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.

select count(City) - count(distinct(City)) as total_city from station;

Q10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths

Ans: (SELECT CITY, LENGTH(CITY)
FROM STATION 
ORDER BY LENGTH(CITY) ASC, CITY ASC LIMIT 1)
UNION
(SELECT  CITY, LENGTH(CITY)
FROM STATION 
ORDER BY LENGTH(CITY) DESC, CITY ASC LIMIT 1)

Q11. Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION.

Ans : select DISTINCT City from station where LEFT(City , 1) IN ('a', 'e', 'i', 'o', 'u') order by City ASC;

Q12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION.

Ans : select DISTINCT City from station where right(City , 1) IN ('a', 'e', 'i', 'o', 'u') order by City ASC;

Q13. Query the list of CITY names from STATION that do not start with vowels.

Ans : select DISTINCT City from station where LEFT(City , 1) NOT IN ('a', 'e', 'i', 'o', 'u') order by City ASC;

Q14. Query the list of CITY names from STATION that do not end with vowels.

Ans : select DISTINCT City from station where right(City , 1) NOT IN ('a', 'e', 'i', 'o', 'u') order by City ASC;

Q15. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels.

Ans: select DISTINCT City from station where LEFT(City , 1) NOT IN ('a', 'e', 'i', 'o', 'u') 
OR right(City , 1) NOT IN ('a', 'e', 'i', 'o', 'u') order by City ASC;

Q16. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels.
Ans: select DISTINCT City from station where LEFT(City , 1) NOT IN ('a', 'e', 'i', 'o', 'u') 
AND  right(City , 1) NOT IN ('a', 'e', 'i', 'o', 'u') order by City ASC;

Q17. Write an SQL query that reports the products that were only sold in the first quarter of 2019. That is, between 2019-01-01 and 2019-03-31 inclusive.

Ans: select p.product_id , p.product_name from product p
inner join sales sl on sl.product_id = p.product_id where sl.sale_date between '2019-01-01' and '2019-03-31' AND
p.product_id NOT IN (
select pr.product_id from product pr inner join sales sl
on pr.product_id = sl.product_id where sl.sale_date NOT between '2019-01-01' and '2019-03-31');

Q18. Write an SQL query to find all the authors that viewed at least one of their own articles. Return the result table sorted by id in ascending order.
Ans: select author_id as id from views where author_id = viewer_id group by author_id order by author_id asc;

Q19. Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.

Ans :  s select ROUND((tmp / total_Count)*100,2) as immediate_percentage from
 (select *,
 (select count(*) as immediate_percentage_count 
 from delivery where order_date = customer_pref_delivery_date) as tmp, 
 count(*) as total_Count
 from delivery) as avg_percentge;
 
 Q20. Write an SQL query to find the ctr of each Ad. Round ctr to two decimal points.
 Ans : 
 select c.ad_id , round(c.total_clicked/(c.total_clicked+v.total_viewed)* 100 , 2)  as ctr
from
(select ad_id,count(*) as total_clicked 
from ads where action IN('clicked')  group by ad_id) as c
INNER JOIN (
select ad_id,count(*) as total_viewed from ads where action IN('viewed')  group by ad_id
) as v
on c.ad_id = v.ad_id order by ctr desc , c.ad_id asc;

Q21.Write an SQL query to find the team size of each of the employees

Ans:select employee_id, count(*) over(partition by team_id) as team_size from employee order by employee_id;

Q22. SQL query to find the type of weather in each country for November 2019

Ans: select country_name,
CASE
            when w_type <= 15 then 'Cold'
            when w_type >= 25 then 'Hot'
            else 'Warm'
       END as weather_state
from
(select c.country_name , w.weather_state , w.day,
avg(w.weather_state) over(partition by c.country_name) as w_type
from countries c
inner join
weather w on c.country_id = w.country_id
where MONTH(w.day) = 11) as tmp
group by country_name order by weather_state;

Q.23 Write an SQL query to find the average selling price for each product. average_price should be rounded to 2 decimal places.

Ans :
select product_id,round((total_price / total_product) , 2) as average_price
    from
    (select p.product_id,
    sum(p.price*u.units) over(partition by p.product_id) as total_price,
    sum(u.units) over(partition by p.product_id) as total_product
    from Prices p inner join unitssold u
	on p.product_id = u.product_id
    where p.start_date <= u.purchase_date AND p.end_date >= u.purchase_date
    ) as tmp group by product_id;
    
 Q24: Write an SQL query to report the first login date for each player.

Ans: 
select player_id , event_date from
(select *,row_number() over(partition by player_id order by event_date) as first_login
from activity) as tmp
where first_login = 1;

Q25:Write an SQL query to report the device that is first logged in for each player

Ans: select player_id , device_id from
(select *,row_number() over(partition by player_id order by event_date) as first_login
from activity) as tmp
where first_login = 1;

Q26.Write an SQL query to get the names of products that have at least 100 units ordered in February 2020 and their amount.

Ans: select p.product_name , sum(unit) as unit
from orders o
INNER JOIN products p
on p.product_id = o.product_id
where o.order_date between '2020-02-01' AND '2020-02-28' group by p.product_id 
HAVING sum(o.unit) >= 100;

Q27. Write an SQL query to find the users who have valid emails

Ans:SELECT user_id,name,mail FROM users where mail REGEXP '^[a-zA-Z0-9][a-zA-Z0-9._-]*@[a-zA-Z0-9][a-zA-Z0-9._-]*\\.[a-zA-Z]{2,4}$' 
AND mail LIKE '%@leetcode.com';

Q28. Write an SQL query to report the customer_id and customer_name of customers who have spent at least $100 in each month of June and July 2020.

Ans: select customer_id,name from
(select cu.name,ord.customer_id , ord.product_id , ord.order_date , ord.quantity , pr.price , sum(ord.quantity * pr.price) as total_spent from order ord 
inner join 
products pr on ord.product_id = pr.product_id 
inner join 
customers cu on cu.customer_id = ord.customer_id
where Month(ord.order_date) IN (6,7) group by Month(order_date) , customer_id
) as all_details 
where total_spent >= 100 group by customer_id having COUNT(customer_id) = 2;

Q29. Write an SQL query to report the distinct titles of the kid-friendly movies streamed in June 2020.
Ans : select DISTINCT cn.title from content cn
	inner join tv_program as tv
	on cn.content_id = tv.content_id
	where cn.kids_content = 'Y' AND cn.content_type = 'Movies'
	AND tv.program_date between '2020-06-01' AND '2020-06-31';
	
Q30. Write an SQL query to find the npv of each query of the Queries table.

Ans : SELECT DISTINCT nv.id,nv.year,nv.npv
FROM queries qr INNER JOIN npv nv
ON nv.id = qr.id AND nv.year = qr.year;

Q32.  Write an SQL query to show the unique id of each user, If a user does not have a unique id replace just show null.

Ans: select un.unique_id , em.name
from employees_uni un right join employees em
on un.id = em.id order by un.unique_id;

Q33. Write an SQL query to report the distance travelled by each user. Return the result table ordered by travelled_distance in descending order, if two or more users travelled the same distance, order them by their name in ascending order

Ans : select us.name,sum(IFNULL(ri.distance, 0)) as travel_distance
from users us left join rides ri 
on us.id = ri.user_id
group by us.id
order by travel_distance desc , us.name asc;

Q.34 SAME AS 26

Q35. Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.

Ans : select us.name from
users us
inner join movie_rating mr
on us.user_id = mr.user_id group by us.name
order by count(mr.rating) desc,length(us.name) asc limit 1;

   Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name


 select 
	mv.title
from movies mv
inner join movie_rating mr
on mv.movie_id = mr.movie_id 
where year(mr.created_at) = '2020' AND month(mr.created_at) = '02'
group by mv.title order by avg(mr.rating) desc,mv.title asc limit 1;

Q.36 SAME AS 33
Q.37 SAME AS 32

Q.38 Write an SQL query to find the id and the name of all students who are enrolled in departments that no longer exist.

ANS : select id,name from
(select st.id , st.name , dp.name as depat_name
from students st 
left join departments dp
on st.department_id = dp.id) as stu_details
where depat_name IS NULL;

Q39. Q.39 Write an SQL query to report the number of calls and the total call duration between each pair of 
distinct persons (person1, person2) where person1 < person2. Return the result table in any order.

Ans:


 
 




